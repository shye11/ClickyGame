{"version":3,"sources":["components/FriendCard/index.js","components/Navbar/index.js","components/Wrapper/index.js","components/Banner/index.js","Container.js","Row.js","Column.js","App.js","serviceWorker.js","index.js"],"names":["FriendCard","props","react_default","a","createElement","className","value","id","onClick","handleClick","alt","name","src","image","Nav","correctIncorrect","score","topScore","Wrapper","children","Banner","Container","concat","fluid","Row","Column","size","split","map","join","randomFriends","array","i","length","j","Math","floor","random","_ref","App","state","friends","currentScore","clicked","_this","indexOf","handleIncrement","setState","handleReset","newScore","handleShuffle","shuffledFriends","_this2","this","components_Wrapper","components_Banner","Navbar","src_Container","src_Row","friend","src_Column","components_FriendCard","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ec763566.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nconst FriendCard = props => (\n  <div \n    className=\"card\" \n    value={props.id} \n    onClick={() => props.handleClick(props.id)}\n  >\n    <div className=\"img-container\">\n      <img alt={props.name} src={props.image} />\n    </div>\n  </div>\n);\n\nexport default FriendCard;","import React from \"react\";\nimport \"./style.css\";\n\nconst Nav = props => (\n  <nav>\n    <h2 id=\"rw\">{props.correctIncorrect}</h2>\n    <ul>\n      <li>Current Score: {props.score}</li>\n\n      <li>Top Score: {props.topScore}</li>\n    </ul>\n  </nav>\n);\n\nexport default Nav;","import React from \"react\";\nimport \"./style.css\";\n\nconst Wrapper = props => <div className=\"wrapper\">{props.children}</div>;\n\nexport default Wrapper;\n","import React from \"react\";\nimport \"./style.css\";\n\nconst Banner = props => (\n<article className=\"mainBanner\">\n    <h1>The Clicky Game!</h1>\n    <p>\n        Click on an image to earn points, but don't click on any more than once!\n    </p>\n</article>\n\n)\n\nexport default Banner;","import React from \"react\";\n\nconst Container = props =>\n  <div className={`container${props.fluid ? \"-fluid\" : \"\"}`}>\n    {props.children}\n  </div>;\n\nexport default Container;\n","import React from \"react\";\n\nconst Row = props =>\n  <div className={`row${props.fluid ? \"-fluid\" : \"\"}`}>\n    {props.children}\n  </div>;\n\nexport default Row;\n","import React from \"react\";\n\nconst Column = props => {\n  const size = props.size.split(\" \").map(size => \"col-\" + size).join(\" \");\n  return (\n    <div className={size}>\n      {props.children}\n    </div>\n  );\n};\n\nexport default Column;","import React, {Component} from \"react\";\nimport FriendCard from \"./components/FriendCard\";\nimport Nav from \"./components/Navbar\";\nimport Wrapper from \"./components/Wrapper\";\nimport Banner from \"./components/Banner\";\n// import Title from \"./components/Title\";\nimport Container from \"./Container\";\nimport Row from \"./Row\";\nimport Column from \"./Column\";\nimport friends from \"./friends.json\";\nimport \"./App.css\";\n\n// Random shuffle\nconst randomFriends = array => {\n  for (let i = array.length - 1; i > 0; i--) {\n    let j = Math.floor(Math.random() * (i + 1));\n    [array[i], array[j]] = [array[j], array[i]];\n  }\n  return array;\n};\n\nclass App extends Component {\n  // Set this.state\n  state = {\n    friends,\n    currentScore: 0,\n    topScore: 0,\n    correctIncorrect: \"\",\n    clicked: [],\n  };\n\n  handleClick = id => {\n    if (this.state.clicked.indexOf(id) === -1) {\n      this.handleIncrement();\n      this.setState({ clicked: this.state.clicked.concat(id) });\n    } else {\n      this.handleReset();\n    }\n  };\n\n  handleIncrement = () => {\n    const newScore = this.state.currentScore + 1;\n    this.setState({\n      currentScore: newScore,\n      correctIncorrect: \"You guessed correctly!\"\n    });\n    if (newScore >= this.state.topScore) {\n      this.setState({ topScore: newScore });\n    }\n    else if (newScore === 12) {\n      this.setState({ correctIncorrect: \"You win!\" });\n    }\n    this.handleShuffle();\n  };\n\n  handleReset = () => {\n    this.setState({\n      currentScore: 0,\n      topScore: this.state.topScore,\n      correctIncorrect: \"You guessed incorrectly!\",\n      clicked: []\n    });\n    this.handleShuffle();\n  };\n\n  handleShuffle = () => {\n    let shuffledFriends = randomFriends(friends);\n    this.setState({ friends: shuffledFriends });\n  };\n\n  render() {\n    return (\n\n      <Wrapper>\n        <Banner>\n          Click on an image to earn points, but don't click on any more than once!\n        </Banner>\n        <Nav\n          score={this.state.currentScore}\n          topScore={this.state.topScore}\n          correctIncorrect={this.state.correctIncorrect}\n        />\n        <Container>\n          <Row>\n            {this.state.friends.map(friend => (\n              <Column size=\"md-3 sm-6\">\n                <FriendCard\n                  key={friend.id}\n                  handleClick={this.handleClick}\n                  handleIncrement={this.handleIncrement}\n                  handleReset={this.handleReset}\n                  handleShuffle={this.handleShuffle}\n                  id={friend.id}\n                  image={friend.image}\n                />\n              </Column>\n            ))}\n          </Row>\n        </Container>\n      </Wrapper>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}